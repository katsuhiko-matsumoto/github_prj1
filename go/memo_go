付録A---------------------------
#install

https://golang.org/doc/install/source
download binary
(for mac)

$ git clone https://go.googlesource.com/go
$ cd go
$ git checkout go1.5.2

$ cd src
$ GOROOT_BOOTSTRAP=/usr/local/go ./all.bash

#env
vi ~/.bash_progile

export PATH=/usr/local/go/bin:${PATH}
export GOPATH=~/Documents/go_lib

#check

go version

##
標準に準拠したレイアウトへの書き換え
go fmt
コード誤り精査
go vet
必要パッケージの精査と書き換え
goimports -w *.go

###Sublime Text3 エディタとの連携
editorインストール
http://www.sublimetext.com/3
パッケージコントロールのインストール
https://packagecontrol.io/installation
上記URLで表示されるコマンドを、sublime text3に入力
[sublime text3]view -> show console

[sublime text3 console] shift + command + p
package control: install package で検索
GoSublimeを検索
選択してenter

#golint install
go get github.com/golang/lint/golint

[sublime text3 console]command+. command+5で設定ファイル呼び出し
GoSublime.sublime-settingsに以下を記述
{
	"on_save": [
    	{"cmd": "gs9o_open", "args": {"run": ["sh", "go build . errors && go test -i && go test && go fmt && go vet && golint ."], "focus_view": false}}
	
}
----

Go言語仕様と若干のライブラリ仕様を理解した人向け
・基本構文（defer:遅延指定,go文:平行化,可変長引数）
・ポインタの概念
・コールバック
などが当たり前に出てくる

mac,unix環境を前提に記されている

git環境必須
sublimeの使用

下記項目を学べる
・認証を備えたチャットアプリでHTTP,WebSocket,OAuthの基礎を習得
・コマンドラインツールで標準入出力を橋渡した複数連携まで
・mongoDB,NSQと連携したTwitterストリーミングAPIを使用したアプリの作成
・RESTfulでCORS(Cross-Origin Resource Sharing)に対応したAPIの公開方法から取得結果を実際にWebで表示活用するまで
・Google Place, Goole Mapを活用したAPIを利用したアプリの作成
・ファイルシステムのバックアップツール作成

紙面だけを参照しながら作業を進める場合は、
import文が省略されていたり（一度説明したパッケージ等は説明しない方針か）、
修正コードにバグがあったり（過不足）、
環境差異で必要ライブラリのダウンロードが必要な場合があったり、
コード修正の指示項目で太字以外も修正箇所があったりするので注意。
Web(Github)で参照できるソースコードを参照すれば、バグが修正されていたり
機能改善されているものもあるので、そちらを参照。
※4章 bighuge.goは存在しないjsonキーを参照しようとしてメモリセグメントエラーが起こる（ダウンロード版は解決している）
※基本的にコンパイラのエラーメッセージを追えば解決できるレベル。


http,WebSocketの基礎を学べるので、従来の動的コンテンツやリアルタイムサービスを作る際の礎にもなる参考書。本にはないライブラリ外部サービスを自分で調べる事で可能性は無限大。

Go:
チャネル等の並行処理向けの仕組みが言語に組み込まれている。


----------------------
1.WebSocketを使ったチャットアプリケーション

・net/httpパッケージで簡易Webサーバの実装。
・テキスト、html用のテンプレートの使用によるコンテンツの分離。
   text/template テキスト向け
   html/template html向け、データ挿入時にコンテキスト認識をする。不正スクリプト埋め込み回避やエンコード処理（エスケープ）が行われる
・sync.Onceによる一度だけの実行。
・ユーザが作成した構造体にServerHTTPメソッドを実装してhttp.Handler型のインタフェースに適合させHTTPリクエストを処理できるようにする。
・Goプログラムのビルドと実行の方法。
・サードパーティ・オープンソースのwebsocketを利用。(go getでパッケージ取得)
・goroutineによる並行化と、goroutine間で安全にメッセージパッシングするチャネルによる情報共有。
・select文のcase節は同時実行されない再入可能な性質を持つ。
・コマンドライン引数から値を取得し、サーバの設定を動的に指定する実装例。
・ログトレース用の自作パッケージの作成とインポート：インタフェースの定義と実装を踏まえ処理の追加。
・公開してない構造体の型をユーザに返す事ができ、ユーザは型について関知しないが、その型で公開されているインタフェースに基づいて操作できる。
・TDD(Test Driven Development)に準じたユニットテストの簡単な実装例と実行: (go test)。

----------------------
2.認証機能の追加
１章で作成したチャットアプリを、Facebook,Github,Googleアカウントの認証を利用してログインできるように機能追加。認証で得たユーザ名でチャットできるようになる。

・Decoratorパターンで、http.Hander型をラップし複数のハンドラを指定順に処理できるように実装。
・OAuth2を使用した他サービス認証連携。(オープンソースgomniauthを使用)
   ※mac環境では、依存ライブラリは右記のコマンドで解決した：brew install bazaar
・Cookie,Base64,JSONを使った実装。
・htmlテンプレートに動的値を渡す。

----------------------
3.プロフィール画像を追加する3つの方法
1章で作成したチャットアプリの画面にユーザのアバター画像を以下の方法で取得する
(1).認証サービスからアバターの画像を取得
(2).GravaterというWebサービスでユーザのメールアドレスから画像を検索し取得
(3).ユーザが作成したアプリに画像をアップロードして取得（Goで静的サーバ：ファイルサーバ）

・md5のハッシュの利用。
・例外処理：error.Newでエラーオブジェクトへのポインタを作成できる。以降はポインタで渡される(Javaなどの例外は高いコストでオブジェクトが作られる)
・グローバル変数の利用。

----------------------
4.ドメイン名を検索するコマンドラインツール
指定したドメイン名とその候補を検索し、使用可能かチェックできるツールの作成。
小さなコマンドラインツールを組み合わせて強力な処理を可能にする。
ツール中で使用する外部サービス：
(1)Big Huge Thesaurus(Webサービス)のAPIを利用(類語候補選出）
(2)WhOISサーバ問い合わせを利用(使用可能domain照合)

・os.Getenvで環境変数から設定値の取得。
・コマンドライン（パイプ）を利用した複数のGoプログラム間での標準入出力の連携。
・Goプログラム内で標準入出力の連携。
・bashによる複数Goプログラムのビルド。

----------------------
5.分散システムと柔軟なデータの処理
TwitterのストリーミングAPIを使用して、ツイートのトレンドワード状況をリアルタイムに取得して集計するアプリの作成。
各システムのコンポーネントをマイクロサービス化し将来的にスケーリングや耐障害性を考慮した構成を可能とする設計も示唆。
必須ミドルウェア環境
・mongoDB：ドキュメント指向DB
・NSQ：メッセージキュー
・上記各種Go用ドライバ
※各種環境構築はhomebrew(mac環境)などでインストール可能。
※ドライバも[go get]で取得可能。
※mongoDBはドキュメント指向でありテーブル定義も不要ですぐ使える。

・envdecodeパッケージの`env:"HOGE"`による環境変数からの設定値の取得。
・プログラムを穏やかに終了する手法。
　-> 問題発生時、必須処理を実行してから終了する実装方法。
　-> シグナルのチャネルを使用する方法
　-> ctrl+cでの終了に対応した実装方法。
・構造体struct{}{}はフィールドがないためメモリを全く消費しない。
　-> シグナルのチャネル送受信でメモリ消費削減に利用できる。
・mongoDB:イテレータでfindした結果を格納し順次アクセスすることによるメモリ消費削減。
・time.AfterFunc(int,func)でgoroutineによる一定時間後実行とcallback関数による実装。

-----------------------
6.REST形式でデータや機能を公開する
５章で作成したTwitterツイート検索アプリのAPIを作成しブラウザで利用できるようにする。

・ハンドラ間でのデータ共有のためグローバル変数を操作するロック機構を備えたヘルパー関数群の実装方法。
・DRY(Don't Repeat Yourself)に基づく実装方法。
・CORS(cross-origin resource sharing)によるWebドメイン間のリソース共有。
・labix.org/v2/mgo/bsonパッケージによるjson,bsonのキー値取得方法。
・curlコマンドを使ったAPIテスト。
・JQuery等でグラフィカルなブラウザ表示用インタフェースの作成。(※ここはGOでない)

nsqlookupd
nsqd --lookupd-tcp-address=localhost:4160
nsq_tail --topic="votes" --lookupd-http-address=localhost:4161
mongod

./counter
./twittervotes
./api
./web

------------------------
7.ランダムなおすすめを提示するWebサービス
Google Place, Google Mapを使用した位置情報からおすすめスポットを表示するWebAPIの作成。
※html,js,cssなどを筆者のリポジトリから取得することでグラフィカルな表示結果が可能。
公開するAPIを変更せず内部を改良したり駆動開発の例を踏まえて記載されている。

・runtime.GOMAXPROCS:CPU数の最大値指定。
・sync.WaitGroupによる複数goroutineの終了待ち制御。
・Goに用意されていない列挙の仕組みを実装。

------------------------
8.バックアップの作成
Goの標準ライブラリ(ioutil,osなど)を使用したバックアップツールの作成。
コマンドラインで実行するツールと、デーモンで起動するプログラムを作成。
※ファイル変更検知用ハッシュ値の永続化に筆者独自のパッケージを使用

・filePath.Walkを使った全ファイル、フォルダへのアクセス
・md5によるファイル内容変更検知
・archive/zipによるファイル圧縮

------------------------
付録A 安定した開発環境のためのベストプラクティス
・Goの実行環境、開発環境の構築
　※最新版等のインストールは、Goの公式サイトのインストール手順の方が正確にインストールできた。

付録B Goらしいコードの書き方
・各章で紹介されたGoによる実装を、よりGo言語ならではの実装に変更した例を紹介。

以上。

